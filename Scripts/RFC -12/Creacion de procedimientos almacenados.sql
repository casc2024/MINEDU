DROP PROCEDURE IF EXISTS [dbo].[USP_ESCALAFON_INS_SERVIDOR_PUBLICO_DATOS_ADICIONALES_IOXML]
GO
DROP PROCEDURE IF EXISTS [dbo].[USP_ESCALAFON_SEL_SEPARACION_PREVENTIVAS_OXML]
GO
DROP PROCEDURE IF EXISTS [dbo].[USP_ESCALAFON_ACT_SEPARACION_PREVENTIVA_ANULA]
GO
DROP PROCEDURE IF EXISTS [dbo].[USP_ESCALAFON_SEL__LISTADO_SEPARACION_PREVENTIVA]
GO

DROP PROCEDURE IF EXISTS [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_JUDICIAL]
GO
DROP PROCEDURE IF EXISTS [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_ADMINISTRATIVA]
GO

/****** Object:  StoredProcedure [dbo].[USP_ESCALAFON_INS_SERVIDOR_PUBLICO_DATOS_ADICIONALES_IOXML]    Script Date: 11/05/2022 18:18:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_ESCALAFON_INS_SERVIDOR_PUBLICO_DATOS_ADICIONALES_IOXML]
@REQUEST_XML XML 	
AS
BEGIN

	DECLARE
		@FECHA_NOTIFICACION DATETIME,
		@FECHA_INICIO DATETIME,
		@FECHA_FIN DATETIME,
		@NOMBRE_DOCUMENTO VARCHAR(250)='',				
		@NOMBRE_ARCHIVO VARCHAR(250)='',	
		@FOLIOS_DOCUMENTO INT,
		@ANOTACIONES VARCHAR(250) = '',
		@ID_RESULTADO INT,
		@DESCRIPCION_RESULTADO VARCHAR(250),
		@ID_SEPARACION_PREVENTIVA INT,
		@DESCRIPCION_SEPARACION_PREVENTIVA VARCHAR(250),
		@ACCION VARCHAR(100),
		@USUARIO VARCHAR(20),
		@NOMBRE_USUARIO VARCHAR(50),
		@AMBITO VARCHAR(100),
		@ROL VARCHAR(100),
		@ID_ESTADO_REGISTRO INT,
		@Message VARCHAR(MAX) = '',
		@MessageReal VARCHAR(MAX) = '',
		@ID_SERVIDOR_PUBLICO INT,
		@ID_CONDICION_LABORAL INT,
		@CODIGO_GRUPO_ACCION INT,
		@ID_TIPO_RESOLUCION INT,
		@ID_SITUACION_LABORAL INT,
		@NUMERO_RESOLUCION VARCHAR(50),
		@CONDICION_LABORAL VARCHAR(50),	
		@SITUACION_LABORAL VARCHAR(50),	
		@FECHA_RESOLUCION DATE,
		@ID_MOTIVO_ACCION INT,
		@ES_HISTORICO BIT = 0,		
		@FECHA_ACTUAL DATETIME = GETDATE(),
		@ID_SITUACION_LABORAL_ACTUAL INT,
		@ID_ACCION_XSP int = 0,
		@Success BIT = 0,	
		@Severity INT = 0,
		@xml_acciones XML

	BEGIN TRANSACTION;  
  
	BEGIN TRY

		SELECT	@USUARIO = UPPER(c.value('@USUARIO', 'VARCHAR(20)')),
				@NOMBRE_USUARIO = UPPER(c.value('@NOMBRE_USUARIO', 'VARCHAR(50)')),
				@AMBITO = UPPER(c.value('@AMBITO', 'VARCHAR(100)')),
				@ROL = UPPER(c.value('@ROL', 'VARCHAR(100)'))
		FROM	@REQUEST_XML.nodes('/root/usuario/row') x(c);


		SELECT	@ID_SERVIDOR_PUBLICO = c.value('@ID_SERVIDOR_PUBLICO', 'INT'),
				@CODIGO_GRUPO_ACCION = c.value('@CODIGO_GRUPO_ACCION', 'INT'),
				@ID_TIPO_RESOLUCION = c.value('@ID_TIPO_RESOLUCION', 'INT'),
				@NUMERO_RESOLUCION = UPPER(c.value('@NUMERO_RESOLUCION', 'VARCHAR(50)')),
				@FECHA_RESOLUCION = c.value('@FECHA_RESOLUCION', 'DATE'),
				@ID_MOTIVO_ACCION = c.value('@ID_MOTIVO_ACCION', 'INT'),
				@ES_HISTORICO = c.value('@ES_HISTORICO', 'BIT'),
				@FECHA_NOTIFICACION = c.value('@FECHA_NOTIFICACION', 'DATE'),
				@FECHA_INICIO = c.value('@FECHA_INICIO', 'DATE'),
				@FECHA_FIN = c.value('@FECHA_FIN', 'DATE'),
				@ANOTACIONES = UPPER(NULLIF(c.value('@ANOTACIONES', 'VARCHAR(250)'),'')),

				@ID_RESULTADO = c.value('@ID_RESULTADO', 'INT'),
				@DESCRIPCION_RESULTADO = UPPER(c.value('@DESCRIPCION_RESULTADO', 'VARCHAR(250)')),
				@ID_SEPARACION_PREVENTIVA = c.value('@ID_SEPARACION_PREVENTIVA', 'INT'),
				@DESCRIPCION_SEPARACION_PREVENTIVA = UPPER(c.value('@DESCRIPCION_SEPARACION_PREVENTIVA', 'VARCHAR(250)')),

				@NOMBRE_DOCUMENTO = UPPER(NULLIF(c.value('@NOMBRE_DOCUMENTO', 'VARCHAR(250)'),'')),
				@NOMBRE_ARCHIVO = UPPER(NULLIF(c.value('@NOMBRE_ARCHIVO', 'VARCHAR(250)'),'')),							
				@FOLIOS_DOCUMENTO = c.value('@FOLIOS_DOCUMENTO', 'INT')
		FROM	@REQUEST_XML.nodes('/root/accion') x(c);	
		
		DECLARE @FECHA_FIN_TEXT VARCHAR(50) = (SELECT CAST(@FECHA_FIN AS date))
		IF (@FECHA_FIN_TEXT = '1900-01-01')
		SET @FECHA_FIN = NULL

		IF (@ID_SEPARACION_PREVENTIVA != -1) 
		BEGIN
			UPDATE [transaccional].[accion_por_servidor_publico]
			SET ID_ESTADO_REGISTRO = 10
			WHERE ID_ACCION_POR_SERVIDOR_PUBLICO = @ID_SEPARACION_PREVENTIVA		
		END

		INSERT INTO [transaccional].[accion_por_servidor_publico]
		(ID_MOTIVO_ACCION, ID_SERVIDOR_PUBLICO, ID_MOTIVO_POR_ESTADO_ENTIDAD, CODIGO_ACCION_POR_SERVIDOR_PUBLICO,
		FECHA_INICIO_ACCION_POR_SERVIDOR_PUBLICO, FECHA_FIN_ACCION_POR_SERVIDOR_PUBLICO, NUMERO_EXPEDIENTE_ACCION_POR_SERVIDOR_PUBLICO, CANTIDAD_FOLIOS_ACCION_POR_SERVIDOR_PUBLICO,
		OBSERVACION_ACCION_POR_SERVIDOR_PUBLICO, VERIFICADO_RNSDD, ES_MANDATO_JUDICIAL_ACCION_POR_SERVIDOR_PUBLICO, PERIODO_ACCION_POR_SERVIDOR_PUBLICO, 
		ID_TIPO_RESOLUCION, NUMERO_RESOLUCION, FECHA_RESOLUCION, 
		ID_ESTADO_REGISTRO,	ES_VIGENTE, FECHA_INICIO_VIGENCIA, FECHA_CREACION, USUARIO_CREACION, ES_BORRADO, ES_HISTORICO, DIAS,
		NOMBRE_USUARIO_CREA, AMBITO_USUARIO_CREA,ROL_USUARIO_CREA,NOMBRE_ARCHIVO,NOMBRE_DOCUMENTO, FOLIOS_DOCUMENTO)
		VALUES
		(@ID_MOTIVO_ACCION, @ID_SERVIDOR_PUBLICO, 3, '12345678', @FECHA_INICIO, @FECHA_FIN, '', 0,
		 @ANOTACIONES,	0, 0, '2020', @ID_TIPO_RESOLUCION, @NUMERO_RESOLUCION, @FECHA_RESOLUCION,
		5, 1, @FECHA_ACTUAL, @FECHA_ACTUAL, @USUARIO, 0, @ES_HISTORICO,NULL, @NOMBRE_USUARIO, @AMBITO, @ROL,
		@NOMBRE_ARCHIVO,@NOMBRE_DOCUMENTO, @FOLIOS_DOCUMENTO)
		SET @ID_ACCION_XSP = SCOPE_IDENTITY();
		
		INSERT INTO [transaccional].[accion_por_servidor_publico_datos_adicionales]
		(ID_ACCION_POR_SERVIDOR_PUBLICO,		
		SECCION, PESTANIA,  		
		FECHA_NOTIFICACION, FECHA_INICIO, FECHA_FIN, ANOTACIONES,
		ID_RESULTADO, DESCRIPCION_RESULTADO,
		ID_SEPARACION_PREVENTIVA, DESCRIPCION_SEPARACION_PREVENTIVA,
		FECHA_CREACION, USUARIO_CREACION, ES_BORRADO)
		VALUES
		(@ID_ACCION_XSP,		
		'OTROS', 'SUSPENSION_PREVENTIVA',		
		@FECHA_NOTIFICACION, @FECHA_INICIO, @FECHA_FIN, @ANOTACIONES,
		@ID_RESULTADO, @DESCRIPCION_RESULTADO, @ID_SEPARACION_PREVENTIVA, @DESCRIPCION_SEPARACION_PREVENTIVA,
		@FECHA_ACTUAL, @USUARIO, 0)		
		

		SELECT	@ID_CONDICION_LABORAL = ASPR.ID_CONDICION_LABORAL
		FROM	transaccional.accion_por_servidor_publico_registro AS ASPR WITH (NOLOCK)
		WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
		
		SELECT	@ID_CONDICION_LABORAL = S.ID_CONDICION_LABORAL,			
				@ID_SITUACION_LABORAL  = S.ID_SITUACION_LABORAL				
		FROM	[sistema].[situacion_laboral_motivo_accion] AS SMA 
				INNER JOIN [sistema].[situacion_laboral] AS S ON SMA.ID_SITUACION_LABORAL = S.ID_SITUACION_LABORAL
				INNER JOIN [sistema].[condicion_laboral] AS C ON C.ID_CONDICION_LABORAL = S.ID_CONDICION_LABORAL
		WHERE	SMA.ID_MOTIVO_ACCION = @ID_MOTIVO_ACCION AND C.ID_CONDICION_LABORAL = @ID_CONDICION_LABORAL

		IF @ID_SITUACION_LABORAL_ACTUAL NOT IN (1,11,20)
			BEGIN
				SELECT	@ACCION = A.DESCRIPCION_ACCION
				FROM	sistema.motivo_accion AS MA WITH (NOLOCK)
						INNER JOIN sistema.accion AS A WITH (NOLOCK) ON MA.ID_ACCION = A.ID_ACCION
				WHERE	MA.ID_MOTIVO_ACCION = @ID_MOTIVO_ACCION

				--Actualizando registro
				UPDATE	A
				SET		ID_CONDICION_LABORAL = @ID_CONDICION_LABORAL,			CONDICION_LABORAL = @CONDICION_LABORAL,
						ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,			SITUACION_LABORAL = @SITUACION_LABORAL,
						ACCION = @ACCION,										ID_ACCION_POR_SERVIDOR_PUBLICO = @ID_ACCION_XSP
				FROM	transaccional.accion_por_servidor_publico_registro AS A
				WHERE	A.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
						
			END	

		
		SET @Success = 1
		SET @Message = 'El registro se guardÃ³ satisfactoriamente.'

	END TRY  
	BEGIN CATCH  

		SET @MessageReal = ERROR_MESSAGE()
		SET @Message = @MessageReal
		SET @Severity = ERROR_SEVERITY()

		IF @Severity = 16
			SET @Message = 'Ha ocurrido un error. Contacte con el administrador del sistema.'
  
		IF @@TRANCOUNT > 0  
			ROLLBACK TRANSACTION;  
	END CATCH;  
  
	IF @@TRANCOUNT > 0  
		COMMIT TRANSACTION;

	IF @Severity = 16 AND @Success = 0
		BEGIN
			INSERT INTO [auditoria].[log_error]
			([NOMBRE_SP], [INPUT_PARAMS_XML], [MENSAJE_BD], [MENSAJE_USUARIO], [FECHA_CREACION], [USUARIO_CREACION])
			VALUES
			('USP_ESCALAFON_INS_ACCION_VACACIONES_ESCALAFON_IOXML', @REQUEST_XML, @MessageReal, @Message, @FECHA_ACTUAL, @USUARIO)
		END

	DECLARE @xml_status_response XML = 
		(SELECT	r.Success, r.Mensaje as [Message], r.[Value]
		 FROM	(SELECT	@Success AS Success, 
						@Message AS Mensaje,
						@ID_ACCION_XSP AS [Value]
				) r
	FOR XML AUTO ,TYPE)

	SELECT  @xml_status_response AS 'StatusResponse',
			@xml_acciones AS 'AccionServidorResponse'
    FOR     XML PATH('') ,ROOT('ROOT');

END
GO


/****** Object:  StoredProcedure [dbo].[USP_ESCALAFON_SEL_SEPARACION_PREVENTIVAS_OXML]    Script Date: 11/05/2022 18:18:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_ESCALAFON_SEL_SEPARACION_PREVENTIVAS_OXML] 
	@ID_SERVIDOR_PUBLICO INT,    
    @pPaginaActual INT,
	@pTamanioPagina INT
AS
BEGIN

	SET DATEFORMAT 'dmy'
	

	DECLARE @xml_acciones XML = 
		(SELECT		r.Anular, r.MotivoAccion, r.Regimen,r.TipoResolucion, r.TipoResolucionAbreviado, r.NumeroResolucion, r.FechaResolucion, 
					r.FechaNotificacion, r.FechaInicio,r.FechaFin, 
					r.Anotaciones, r.Estado, r.IdAccionPorServidorPublicoDatosAdiciones, r.IdAccionPorServidorPublico,
					r.FechaCrea, r.NombreUsuarioCrea, r.AmbitoUsuarioCrea, r.RolUsuarioCrea, r.FechaModifica, r.NombreUsuarioModifica, r.AmbitoUsuarioModifica, r.RolUsuarioModifica,
					r.NombreDocumento,r.NombreArchivo,r.FoliosDocumento,
		        r.[Row], r.Total, 26 AS CodigoGrupoAccion
		 FROM	(	
						SELECT	CONVERT(BIT,CASE WHEN er.CODIGO_ESTADO_REGISTRO IN (5) THEN 1 Else 0  END) AS Anular
								, a.DESCRIPCION_ACCION as Accion
								, ma.DESCRIPCION_MOTIVO_ACCION as MotivoAccion
								, r.DESCRIPCION_REGIMEN as Regimen 
								, tr.NOMBRE_TIPO_RESOLUCION as TipoResolucion
								, tr.ABREVIATURA as TipoResolucionAbreviado
								, asp.NUMERO_RESOLUCION  AS NumeroResolucion
								, FORMAT(asp.FECHA_RESOLUCION , 'dd/MM/yyyy') as FechaResolucion
								, FORMAT(aspda.FECHA_NOTIFICACION , 'dd/MM/yyyy') as FechaNotificacion
								, FORMAT(aspda.FECHA_INICIO , 'dd/MM/yyyy') as FechaInicio
								, FORMAT(aspda.FECHA_FIN, 'dd/MM/yyyy')as FechaFin							
								, aspda.ANOTACIONES as Anotaciones
								, er.DESCRIPCION_ESTADO_REGISTRO as Estado								
								, aspda.ID_ACCION_POR_SERVIDOR_PUBLICO_DATOS_ADICIONALES as IdAccionPorServidorPublicoDatosAdiciones
								, aspda.ID_ACCION_POR_SERVIDOR_PUBLICO as IdAccionPorServidorPublico
								, FORMAT(asp.FECHA_CREACION,'dd/MM/yyyy hh:mm tt') AS FechaCrea
								, ISNULL(asp.NOMBRE_USUARIO_CREA,'') AS NombreUsuarioCrea
								, ISNULL(asp.AMBITO_USUARIO_CREA,'') AS AmbitoUsuarioCrea
								, ISNULL(asp.ROL_USUARIO_CREA,'') AS RolUsuarioCrea
								, FORMAT(asp.FECHA_MODIFICACION,'dd/MM/yyyy hh:mm tt') AS FechaModifica
								, ISNULL(asp.NOMBRE_USUARIO_MODIFICA,'') AS NombreUsuarioModifica
								, ISNULL(asp.AMBITO_USUARIO_MODIFICA,'') AS AmbitoUsuarioModifica
								, ISNULL(asp.ROL_USUARIO_MODIFICA,'') AS RolUsuarioModifica
                                , asp.NOMBRE_DOCUMENTO as NombreDocumento
								, asp.NOMBRE_ARCHIVO as NombreArchivo
								, asp.FOLIOS_DOCUMENTO as FoliosDocumento
								--, ga.CODIGO_GRUPO_ACCION as CodigoGrupoAccion

								, ROW_NUMBER() OVER (ORDER BY asp.FECHA_CREACION DESC) AS [Row]
								, COUNT(1) OVER() AS Total 										
						FROM	transaccional.accion_por_servidor_publico_datos_adicionales as  aspda  WITH (NOLOCK) 
								inner join transaccional.accion_por_servidor_publico as asp WITH (NOLOCK) ON asp.ID_ACCION_POR_SERVIDOR_PUBLICO = aspda.ID_ACCION_POR_SERVIDOR_PUBLICO
								inner join sistema.motivo_accion  as ma  WITH (NOLOCK) on asp.ID_MOTIVO_ACCION = ma.ID_MOTIVO_ACCION 
								inner join sistema.accion as a  WITH (NOLOCK) on ma.ID_ACCION = a.ID_ACCION 
								inner join parametrica.regimen_por_grupo_accion as rga  WITH (NOLOCK) on a.ID_REGIMEN_POR_GRUPO_ACCION = rga.ID_REGIMEN_POR_GRUPO_ACCION 
								inner join sistema.grupo_accion ga  WITH (NOLOCK) on rga.ID_GRUPO_ACCION = ga.ID_GRUPO_ACCION 
								inner join sistema.regimen r WITH (NOLOCK) on rga.ID_REGIMEN = r.ID_REGIMEN 
								inner join sistema.tipo_resolucion  tr  WITH (NOLOCK) on asp.ID_TIPO_RESOLUCION = tr.ID_TIPO_RESOLUCION 
								inner join sistema.estado_registro as er  WITH (NOLOCK) on asp.ID_ESTADO_REGISTRO = er.ID_ESTADO_REGISTRO
						WHERE	asp.ID_SERVIDOR_PUBLICO =  @ID_SERVIDOR_PUBLICO	
								and ga.ID_GRUPO_ACCION = 26 --SEPARACIÃN PREVENTIVA
						ORDER BY aspda.FECHA_CREACION	DESC

					OFFSET ((@pPaginaActual - 1) * @pTamanioPagina) ROWS
					FETCH NEXT @pTamanioPagina ROWS ONLY
				) r 
		 FOR XML AUTO ,TYPE)

	SELECT  @xml_acciones AS 'SEPARACION_PREVENTIVA'
    FOR     XML PATH('') ,ROOT('ROOT');

END
GO


/****** Object:  StoredProcedure [dbo].[USP_ESCALAFON_ACT_SEPARACION_PREVENTIVA_ANULA]    Script Date: 11/05/2022 18:19:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_ESCALAFON_ACT_SEPARACION_PREVENTIVA_ANULA]
	--@ID_BENEFICIO_SERVIDOR_PUBLICO INT,
	--@USUARIO VARCHAR(12)
	@REQUEST_XML XML
AS
BEGIN

--	DECLARE @REQUEST_XML XML = 
--	'<root>
--  <separacionPreventiva ID_ACCION_POR_SERVIDOR_PUBLICO="5648767" />
--  <usuario>
--    <row USUARIO="42813053" NOMBRE_USUARIO="CHRISTIAN ABELARDO SCHEREIBER CORNELIO" ID_CENTRO_AMBITO="173" ID_TIPO_CENTRO_AMBITO="2" AMBITO="UGEL San Juan de Lurigancho 05" CODIGO_ROL="GSD002" ROL="TÃ©cnico de escalafÃ³n " FECHA_CREACION="05/05/2022 11:32 a.Â m." ID_USUARIO="80874" />
--  </usuario>
--</root>'

	DECLARE	@ID_PERSONA INT = 0,
			@ID_SERVIDOR_PUBLICO INT = 0,
			@ID_TIPO_DIRECCION INT = 0,
			@CODIGO_TIPO_DIRECCION INT = 0,			
			@FECHA_ACTUAL DATETIME = GETDATE(),
			@ID_ESTADO_ANULADO INT,
			@NOMBRE_USUARIO VARCHAR(50),
			@AMBITO VARCHAR(100),
			@ROL VARCHAR(100),
			@USUARIO VARCHAR(12),
			@ID_ACCION_POR_SERVIDOR_PUBLICO INT,
			@ES_VIGENTE BIT,
			@CODIGO_ESTADO_REGISTRO INT,
			@ID_ENTIDAD INT,

			@Success BIT = 0,
			@Severity INT = 0,
			@Message VARCHAR(MAX) = '',
			@MessageReal VARCHAR(MAX) = ''

	BEGIN TRANSACTION;  
  
	BEGIN TRY

		SELECT	@USUARIO = UPPER(c.value('@USUARIO', 'VARCHAR(20)')),
				@NOMBRE_USUARIO = UPPER(c.value('@NOMBRE_USUARIO', 'VARCHAR(50)')),
				@AMBITO = UPPER(c.value('@AMBITO', 'VARCHAR(100)')),
				@ROL = UPPER(c.value('@ROL', 'VARCHAR(100)'))
		FROM	@REQUEST_XML.nodes('/root/usuario/row') x(c);

		SELECT	@ID_ESTADO_ANULADO = ID_ESTADO_REGISTRO
		FROM	sistema.estado_registro AS ER WITH (NOLOCK)
		WHERE	ER.CODIGO_ESTADO_REGISTRO = 6 --ANULADO

		SELECT	@ID_ACCION_POR_SERVIDOR_PUBLICO = c.value('@ID_ACCION_POR_SERVIDOR_PUBLICO', 'INT')
		FROM	@REQUEST_XML.nodes('/root/separacionPreventiva') x(c);

		--SELECT 
		--@ID_ACCION_POR_SERVIDOR_PUBLICO
		UPDATE	B
				SET		ID_ESTADO_REGISTRO = 6,
						FECHA_MODIFICACION = @FECHA_ACTUAL, 
						USUARIO_MODIFICACION = @USUARIO
				FROM	transaccional.accion_por_servidor_publico AS B
				WHERE	B.ID_ACCION_POR_SERVIDOR_PUBLICO = @ID_ACCION_POR_SERVIDOR_PUBLICO	

		SET @Success = 1
		SET @Message = 'El registro se anulÃ³ satisfactoriamente.'


	END TRY  
	BEGIN CATCH

		SET @MessageReal = ERROR_MESSAGE()
		SET @Message = @MessageReal
		SET @Severity = ERROR_SEVERITY()

		IF @Severity = 16
			SET @Message = 'Ha ocurrido un error. Contacte con el administrador del sistema.'
  
		IF @@TRANCOUNT > 0  
			ROLLBACK TRANSACTION;  
	END CATCH;  
  
	IF @@TRANCOUNT > 0  
		COMMIT TRANSACTION;

	IF @Severity = 16 AND @Success = 0
		BEGIN
			INSERT INTO [auditoria].[log_error]
			([NOMBRE_SP], [INPUT_PARAMS_XML], [MENSAJE_BD], [MENSAJE_USUARIO], [FECHA_CREACION], [USUARIO_CREACION])
			VALUES
			('USP_ESCALAFON_ACT_SEPARACION_PREVENTIVA_ANULA', @REQUEST_XML, @MessageReal, @Message, @FECHA_ACTUAL, @USUARIO)
		END

	SELECT	@Success AS Success,
			@Message AS [Message],
			@ID_ACCION_POR_SERVIDOR_PUBLICO AS [Value]

END
GO

/****** Object:  StoredProcedure [dbo].[USP_ESCALAFON_SEL__LISTADO_SEPARACION_PREVENTIVA]    Script Date: 11/05/2022 18:22:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_ESCALAFON_SEL__LISTADO_SEPARACION_PREVENTIVA]    
@IdServidorPublico INT      
AS    
BEGIN
SET NOCOUNT ON;    
    
SELECT	b.ABREVIATURA +' - '+ a.NUMERO_RESOLUCION + '  - '+ 
			CONVERT(VARCHAR,c.FECHA_NOTIFICACION, 103) AS DETALLE_SEPARACION
			,a.ID_ACCION_POR_SERVIDOR_PUBLICO, ID_SERVIDOR_PUBLICO 
	FROM  transaccional.accion_por_servidor_publico a 
	INNER JOIN sistema.tipo_resolucion b on a.ID_TIPO_RESOLUCION = b.ID_TIPO_RESOLUCION
	INNER JOIN  transaccional.accion_por_servidor_publico_datos_adicionales c on a.ID_ACCION_POR_SERVIDOR_PUBLICO = c.ID_ACCION_POR_SERVIDOR_PUBLICO
	WHERE  
	a.ID_ESTADO_REGISTRO = 5
	AND a.ID_SERVIDOR_PUBLICO = @IdServidorPublico
	AND a.ES_VIGENTE = 1
	AND c.FECHA_FIN IS NULL
	 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_JUDICIAL]    Script Date: 11/05/2022 18:37:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*

EXEC [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_JUDICIAL]
'<root>
  <datos_sancion CAUSA_SANCION="HGFHGF" FECHA_NOTIFICACION="2022-05-11T05:00:00Z" FECHA_INICIO="1900-01-01T00:00:00" FECHA_FIN="1900-01-01T00:00:00" DIAS_SANCION="-1" ID_SERVIDOR_PUBLICO="183096" ID_TIPO_RESOLUCION="21" NUMERO_RESOLUCION="165345-6465-4" FECHA_RESOLUCION="2022-05-10T05:00:00Z" ENTIDAD_EMISORA_RESOLUCION="HGFHGF" NOMBRE_DOCUMENTO="archivoPrueba.pdf" NOMBRE_ARCHIVO="2/50ada96b-75d1-ec11-b81b-0050569005a4" FOLIOS_DOCUMENTO="2" ES_DESTITUCION="true" OBSERVACION="" CANTIDAD_ANIOS_INHABILITACION="1" FECHA_INICIO_INHABILITACION="2022-05-12T05:00:00Z" FECHA_FIN_INHABILITACION="2023-05-12T05:00:00Z" />
  <usuario>
    <row USUARIO="42813053" NOMBRE_USUARIO="CHRISTIAN ABELARDO SCHEREIBER CORNELIO" ID_CENTRO_AMBITO="173" ID_TIPO_CENTRO_AMBITO="2" AMBITO="UGEL San Juan de Lurigancho 05" CODIGO_ROL="GSD002" ROL="TÃ©cnico de escalafÃ³n " FECHA_CREACION="11/05/2022 04:59 p.Â m." ID_USUARIO="80874" />
  </usuario>
</root>'

*/

CREATE PROCEDURE [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_JUDICIAL] 
@REQUEST_XML XML      
AS      
BEGIN      

 DECLARE      
   @ID_PERSONA INT = 0,      
   @ID_SERVIDOR_PUBLICO INT = 0,      
   @USUARIO VARCHAR(20) = '',      
   @FECHA_ACTUAL DATETIME = GETDATE(),
   @FECHA_HOY DATE = GETDATE(),

   @NOMBRE_USUARIO VARCHAR(50),
   @AMBITO VARCHAR(100),
   @ROL VARCHAR(100),
      
   @ID_ESTADO_APROBADO INT,  
   @ID_SANCION_POR_SERVIDOR_PUBLICO INT,   

   @NUMERO_RESOLUCION VARCHAR(50),					
   @ID_TIPO_RESOLUCION INT,				
   @FECHA_RESOLUCION DATE,   
   @FECHA_INICIO_SET DATETIME ,
   @FECHA_FIN_SET DATETIME ,
   @DIAS_SANCION INT,
   @DIF_DIAS INT = 0,
      
   @Success BIT = 0,      
   @Severity INT = 0,      
   @Message VARCHAR(MAX) = '',      
   @MessageReal VARCHAR(MAX) = '',
   @ES_DESTITUCION BIT = 0,
   @ID_SITUACION_LABORAL INT = 0,
   @DESC_SITUACION_LABORAL_ACTUAL VARCHAR(10) =  '',
   @FECHA_FIN_INHABILITACION DATE 
BEGIN TRANSACTION;        
        
BEGIN TRY      
    

		SELECT	@USUARIO = UPPER(c.value('@USUARIO', 'VARCHAR(20)')),
				@NOMBRE_USUARIO = UPPER(c.value('@NOMBRE_USUARIO', 'VARCHAR(50)')),
				@AMBITO = UPPER(c.value('@AMBITO', 'VARCHAR(100)')),
				@ROL = UPPER(c.value('@ROL', 'VARCHAR(100)'))
		FROM	@REQUEST_XML.nodes('/root/usuario/row') x(c);
      
		SELECT @ID_ESTADO_APROBADO = ID_ESTADO_REGISTRO      
		FROM sistema.estado_registro AS ER WITH (NOLOCK)      
		WHERE ER.CODIGO_ESTADO_REGISTRO = 5 --APROBADO      
      
  
  
  
  
		IF OBJECT_ID('tempdb..#DATOS_SANCIONES_JUDICIALES') IS NOT NULL       
			DROP TABLE #DATOS_SANCIONES_JUDICIALES      
      
    
		  CREATE TABLE #DATOS_SANCIONES_JUDICIALES    
		  (
			CODIGO_ESTADO_REGISTRO INT,      
			DIAS_SANCION INT,      
			ID_SERVIDOR_PUBLICO INT,    
			CAUSA_SANCION VARCHAR(250), 
			FECHA_NOTIFICACION VARCHAR(50), 
			FECHA_INICIO VARCHAR(50),   
			FECHA_FIN VARCHAR(50), 
			--USUARIO_CREACION VARCHAR(12) ,  
			ID_TIPO_RESOLUCION INT,
			NUMERO_RESOLUCION VARCHAR(50),
			FECHA_RESOLUCION DATE,
			ENTIDAD_EMISORA_RESOLUCION VARCHAR(60),
			NOMBRE_DOCUMENTO VARCHAR(250),
			NOMBRE_ARCHIVO VARCHAR(250),
			FOLIOS_DOCUMENTO INT,
			OBSERVACION VARCHAR(255),
			ES_DESTITUCION BIT,
			CANTIDAD_ANIOS_INHABILITACION INT,
			FECHA_INICIO_INHABILITACION DATE,
			FECHA_FIN_INHABILITACION DATE
		  )      
   
  INSERT INTO #DATOS_SANCIONES_JUDICIALES      
  SELECT   c.value('@CODIGO_ESTADO_REGISTRO', 'INT')      
    , c.value('@DIAS_SANCION', 'INT')      
    , c.value('@ID_SERVIDOR_PUBLICO', 'INT')      
    , UPPER(NULLIF(c.value('@CAUSA_SANCION', 'VARCHAR(250)'),''))
    , CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_NOTIFICACION', 'DATETIME')))   
    , CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_INICIO', 'DATETIME')))   
    , CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_FIN', 'DATETIME')))   
    --, NULLIF(c.value('@USUARIO_CREACION', 'VARCHAR(12)'),'')     
    , c.value('@ID_TIPO_RESOLUCION', 'INT')      
    , UPPER(NULLIF(c.value('@NUMERO_RESOLUCION', 'VARCHAR(50)'),''))
    , c.value('@FECHA_RESOLUCION', 'DATE')    
    , UPPER(NULLIF(c.value('@ENTIDAD_EMISORA_RESOLUCION', 'VARCHAR(60)'),''))
    , NULLIF(c.value('@NOMBRE_DOCUMENTO', 'VARCHAR(250)'),'')
    , NULLIF(c.value('@NOMBRE_ARCHIVO', 'VARCHAR(250)'),'')
    , c.value('@FOLIOS_DOCUMENTO', 'INT')	
    , NULLIF(c.value('@OBSERVACION', 'VARCHAR(250)'),'')
	, c.value('@ES_DESTITUCION', 'BIT')	
	, c.value('@CANTIDAD_ANIOS_INHABILITACION', 'INT')
	, c.value('@FECHA_INICIO_INHABILITACION', 'DATE')
	, c.value('@FECHA_FIN_INHABILITACION', 'DATE')
  FROM @REQUEST_XML.nodes('/root/datos_sancion') x(c);
    ---select  * from #DATOS_SANCIONES_JUDICIALES    
  
    
	  SELECT @ID_SERVIDOR_PUBLICO = ID_SERVIDOR_PUBLICO--,      
		   --@USUARIO = USUARIO_CREACION   
			, @ID_TIPO_RESOLUCION = ID_TIPO_RESOLUCION
			, @NUMERO_RESOLUCION = NUMERO_RESOLUCION
			, @FECHA_RESOLUCION = FECHA_RESOLUCION
			, @FECHA_INICIO_SET = FECHA_INICIO
			, @FECHA_FIN_SET = FECHA_FIN
			,@DIAS_SANCION = DIAS_SANCION
	   FROM #DATOS_SANCIONES_JUDICIALES     
    
		IF @FECHA_RESOLUCION > @FECHA_HOY
			BEGIN
				SET @Message = 'La feha de la resoluciÃ³n no puede ser mayor a la fecha actual.';
				RAISERROR(@Message,11,1)
			END

		IF @ID_SERVIDOR_PUBLICO = 0      
		BEGIN      
		RAISERROR('Error. No se pudo identificar al servidor.',11,1)          
		END   

		IF YEAR(@FECHA_INICIO_SET) = 1900
				SET @FECHA_INICIO_SET = NULL

	
		IF YEAR(@FECHA_FIN_SET) = 1900
				SET @FECHA_FIN_SET = NULL

		IF @DIAS_SANCION = -1
		BEGIN
			SET  @DIAS_SANCION = NULL
		ENd	

		/*VALIDACION SI ES QUE LA DIFERENCIA DE AÃOS ES IGUAL A LA CANTIDAD DE DIAS*/
		IF(@FECHA_INICIO_SET IS NOT NULL AND @FECHA_FIN_SET IS NOT NULL AND @DIAS_SANCION IS NOT NULL)
		BEGIN
			SET @DIF_DIAS = DATEDIFF(DAY,@FECHA_INICIO_SET,@FECHA_FIN_SET) + 1
			IF(@DIF_DIAS <> @DIAS_SANCION)
			BEGIN
					SET @Message = 'No se puede registrar la acciÃ³n, debido a que las fechas de inicio, fecha fin o cantidad de dÃ­as no son vÃ¡lidas.';
					RAISERROR(@Message,11,1)
			END
		END

		/*BEGIN VALIDACION POR TIPO, NUMERO RESOLUCION Y AÃO DE RESOLUCION*/
		IF EXISTS(	SELECT	1
						FROM	transaccional.sancion_por_servidor_publico AS SSP WITH (NOLOCK)
								INNER JOIN sistema.estado_registro AS ER WITH (NOLOCK) ON SSP.ID_ESTADO_REGISTRO_JUDICIAL = ER.ID_ESTADO_REGISTRO
						WHERE	
								SSP.ID_TIPO_SANCION = 9 --SANCIONES JUDICIALES
								AND SSP.ID_TIPO_RESOLUCION = @ID_TIPO_RESOLUCION
								AND SSP.NUMERO_RESOLUCION = @NUMERO_RESOLUCION
								AND YEAR(SSP.FECHA_RESOLUCION) = YEAR(@FECHA_RESOLUCION)
								AND ER.CODIGO_ESTADO_REGISTRO <> 6 --DIFERENTE DE ANULADO
								AND SSP.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO)
				BEGIN
					SET @Message = 'No se pudo realizar la acciÃ³n, debido a que ya existe un registro igual al ingresado.';
					RAISERROR(@Message,11,1)
				END
		/*END VALIDACION POR TIPO Y NUMERO RESOLUCION*/

		/*INICIO ---> ACTUALIZAR LA SITUACION LABORAL - CONDICION EN DESTITUCION IGUAL FALSE*/		
		SELECT @DESC_SITUACION_LABORAL_ACTUAL = SITUACION_LABORAL FROM transaccional.accion_por_servidor_publico_registro (NOLOCK) WHERE ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
		IF (@DESC_SITUACION_LABORAL_ACTUAL != 'CESADO')
		BEGIN
			SELECT @ES_DESTITUCION = ES_DESTITUCION    
			FROM #DATOS_SANCIONES_JUDICIALES   
			--PRINT ('@ES_DESTITUCION ' + CONVERT (VARCHAR(10), @ES_DESTITUCION))
			IF (@ES_DESTITUCION = 0)
			BEGIN
			
				SELECT @ID_SITUACION_LABORAL = ID_CONDICION_LABORAL FROM [sistema].[situacion_laboral] (NOLOCK) WHERE ID_CONDICION_LABORAL = (SELECT ID_REGIMEN FROM  transaccional.accion_por_servidor_publico_registro (NOLOCK) 
																											WHERE ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO) AND DESCRIPCION_SITUACION_LABORAL LIKE '%CON SANCIÃN%'
				--PRINT ('@ID_SITUACION_LABORAL ' + CONVERT (VARCHAR(10), @ID_SITUACION_LABORAL))

				UPDATE transaccional.accion_por_servidor_publico_registro 
				SET ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,
				SITUACION_LABORAL = 'CON SANCIÃN'
				WHERE ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
			END

			IF (@ES_DESTITUCION = 1)
			BEGIN			
			
				SELECT @FECHA_FIN_INHABILITACION = FECHA_FIN_INHABILITACION FROM #DATOS_SANCIONES_JUDICIALES  
				--PRINT (CONVERT(varchar,@FECHA_FIN_INHABILITACION,101) + 'FECHA_FIN_INHABILITACION')
				IF (@FECHA_FIN_INHABILITACION >= GETDATE())				
				BEGIN
					SELECT @ID_SITUACION_LABORAL = ID_CONDICION_LABORAL FROM [sistema].[situacion_laboral] (NOLOCK)  WHERE ID_CONDICION_LABORAL = (SELECT ID_REGIMEN FROM  transaccional.accion_por_servidor_publico_registro (NOLOCK) 
																												WHERE ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO) AND DESCRIPCION_SITUACION_LABORAL LIKE '%CESADO%'
					--PRINT ('@ID_SITUACION_LABORAL ' + CONVERT (VARCHAR(10), @ID_SITUACION_LABORAL))

					UPDATE transaccional.accion_por_servidor_publico_registro 
					SET ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,
					SITUACION_LABORAL = 'CESADO'
					WHERE ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
				END
			END
		END
		/*FIN ----> ACTUALIZAR LA SITUACION LABORAL - CONDICION EN DESTITUCION IGUAL FALSE*/
     
		SELECT @ID_PERSONA = ID_PERSONA      
		FROM maestro.servidor_publico AS SP WITH (NOLOCK)      
		WHERE SP.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO      
    
  
		INSERT INTO transaccional.sancion_por_servidor_publico   
		(  
			[ID_SERVIDOR_PUBLICO]  
			,ID_TIPO_SANCION
			,ID_ESTADO_REGISTRO_JUDICIAL 
			,CAUSA_SANCION_POR_SERVIDOR_PUBLICO
			,FECHA_NOTIFICA_SANCION_SANCION_POR_SERVIDOR_PUBLICO
			,FECHA_INICIO_VIGENCIA
			,FECHA_INI_SANCION_SANCION_POR_SERVIDOR_PUBLICO  
			,FECHA_FIN_SANCION_SANCION_POR_SERVIDOR_PUBLICO  
			, DIAS_SANCION_SANCION_POR_SERVIDOR_PUBLICO
			,[ES_VIGENTE]  
			,[FECHA_CREACION]
			,[NOMBRE_DOCUMENTO]
			,[NOMBRE_ARCHIVO]
			,[FOLIOS_DOCUMENTO]
			,[OBSERVACION_SANCION_POR_SERVIDOR_PUBLICO]
			--,[USUARIO_CREACION]
			, USUARIO_CREACION
			, NOMBRE_USUARIO_CREA
			, AMBITO_USUARIO_CREA
			, ROL_USUARIO_CREA

			,[ES_BORRADO]  
			,ID_TIPO_RESOLUCION
			,NUMERO_RESOLUCION
			,FECHA_RESOLUCION
			,ENTIDAD_EMISORA_RESOLUCION
			,ES_DESTITUCION
			,CANTIDAD_ANIOS_INHABILITACION
			,FECHA_INICIO_INHABILITACION
			,FECHA_FIN_INHABILITACION
		)      
		SELECT     
  
		@ID_SERVIDOR_PUBLICO ,  
		9,
		@ID_ESTADO_APROBADO,  
		CAUSA_SANCION,  
		FECHA_NOTIFICACION,  
		@FECHA_ACTUAL,  
		@FECHA_INICIO_SET,  
		@FECHA_FIN_SET,  
		@DIAS_SANCION,
		1,  
		@FECHA_ACTUAL,
			NOMBRE_DOCUMENTO,
			NOMBRE_ARCHIVO,
			FOLIOS_DOCUMENTO,
			OBSERVACION,
		--USUARIO_CREACION,  
		@USUARIO, 
		@NOMBRE_USUARIO, 
		@AMBITO,
		@ROL,

		0 ,
		ID_TIPO_RESOLUCION,
		NUMERO_RESOLUCION,
		FECHA_RESOLUCION,
		ENTIDAD_EMISORA_RESOLUCION,
		ES_DESTITUCION
		,CANTIDAD_ANIOS_INHABILITACION
		,FECHA_INICIO_INHABILITACION
		,FECHA_FIN_INHABILITACION
		FROM #DATOS_SANCIONES_JUDICIALES      
		SET @ID_SANCION_POR_SERVIDOR_PUBLICO = SCOPE_IDENTITY();      
    

		SET @Success = 1      
		SET @Message = 'El registro se guardÃ³ satisfactoriamente.'      
      
 END TRY        
 BEGIN CATCH        
      
  SET @MessageReal = ERROR_MESSAGE()      
  SET @Message = @MessageReal      
  SET @Severity = ERROR_SEVERITY()      
      
  IF @Severity = 16      
   SET @Message = 'Ha ocurrido un error. Contacte con el administrador del sistema.'      
        
  IF @@TRANCOUNT > 0        
   ROLLBACK TRANSACTION;        
 END CATCH;        
        
 IF @@TRANCOUNT > 0        
  COMMIT TRANSACTION;      
      
 IF @Severity = 16 AND @Success = 0      
  BEGIN      
   INSERT INTO [auditoria].[log_error]      
   ([NOMBRE_SP], [INPUT_PARAMS_XML], [MENSAJE_BD], [MENSAJE_USUARIO], [FECHA_CREACION], [USUARIO_CREACION])      
   VALUES      
   ('USP_ESCALAFON_INS_DATOS_SANCION_JUDICIAL', @REQUEST_XML, @MessageReal, @Message, @FECHA_ACTUAL, @USUARIO)      
  END      
      
 SELECT @Success AS Success,      
   @Message AS [Message],      
   @ID_SANCION_POR_SERVIDOR_PUBLICO AS [Value]      
      
END
GO


/****** Object:  StoredProcedure [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_ADMINISTRATIVA]    Script Date: 11/05/2022 18:38:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
EXEC [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_ADMINISTRATIVA]
'<root>
  <datos_sancion ID_TIPO_SANCION="6" FECHA_INICIO="2022-05-01T05:00:00Z" FECHA_FIN="2022-06-24T05:00:00Z" FECHA_CESE="1900-01-01T00:00:00" ID_REGIMEN="6" FECHA_NOTIFICACION="2022-05-11T05:00:00Z" ID_SERVIDOR_PUBLICO="114237" ID_TIPO_RESOLUCION="3" NUMERO_RESOLUCION="343434-3434-34" FECHA_RESOLUCION="2022-05-05T05:00:00Z" DIAS_SANCION="55" ID_SANCION_APERTURA="0" DESCRIPCION_SANCION_RELACIONADA="" ENTIDAD_EMISORA_RESOLUCION="ASDASDAD" NOMBRE_DOCUMENTO="archivoPrueba.pdf" NOMBRE_ARCHIVO="2/9fcda53f-7dd1-ec11-b81b-0050569005a4" FOLIOS_DOCUMENTO="2" OBSERVACION="" CANTIDAD_ANIOS_INHABILITACION="0" FECHA_INICIO_INHABILITACION="2022-05-12T05:00:00Z" FECHA_FIN_INHABILITACION="1900-01-01T00:00:00" />
  <usuario>
    <row USUARIO="42813053" NOMBRE_USUARIO="CHRISTIAN ABELARDO SCHEREIBER CORNELIO" ID_CENTRO_AMBITO="173" ID_TIPO_CENTRO_AMBITO="2" AMBITO="UGEL San Juan de Lurigancho 05" CODIGO_ROL="GSD002" ROL="TÃ©cnico de escalafÃ³n " FECHA_CREACION="11/05/2022 06:04 p.Â m." ID_USUARIO="80874" />
  </usuario>
</root>'
*/

CREATE PROCEDURE [dbo].[USP_ESCALAFON_INS_DATOS_SANCION_ADMINISTRATIVA] 
@REQUEST_XML XML      
AS      
BEGIN      

		DECLARE @ID_PERSONA INT = 0,      
				@ID_SERVIDOR_PUBLICO INT = 0,      
				@USUARIO VARCHAR(20) = '',      
				@FECHA_ACTUAL DATETIME = GETDATE(),  
				@DESCRIPCION_RELACIONADA varchar(500),
				--@ID_TIPO_MONEDA INT,
				--@MONTO DECIMAL,
				@ID_TIPO_SANCION INT,  
				@ID_ESTADO_APROBADO INT,  
				@ID_SANCION_POR_SERVIDOR_PUBLICO INT,    
				@ID_SANCION_APERTURA int,

				@FECHA_INICIO_SET DATETIME ,
				@FECHA_FIN_SET DATETIME ,
				@FECHA_CESE_SET DATETIME ,
				@FECHA_NOTIFICACION DATETIME ,
				@ID_TIPO_RESULTADO_SET INT,
				@DIAS_SANCION INT,    
				@NUMERO_RESOLUCION VARCHAR(50),					
				@ID_TIPO_RESOLUCION INT,				
				@FECHA_RESOLUCION DATE,   
				@DIF_DIAS INT = 0,

				@NOMBRE_USUARIO VARCHAR(50),
				@AMBITO VARCHAR(100),
				@ROL VARCHAR(100),
				@ES_EXTRABAJADOR BIT = 0,
				@ID_REGIMEN_SERVIDOR INT,
				@SITUACION_LABORAL VARCHAR(100),
				@ID_SITUACION_LABORAL INT,
				@ID_CONDICION_LABORAL INT,	
				@SITUACION_LABORAL_CESE VARCHAR(50),
				@FECHA_HOY DATE = GETDATE(),  
				@ES_VIGENTE  INT = 1,
				@ID_SITUACION_LABORAL_ACTUAL INT,
				@CODIGO_TIPO_SANCION INT,
				@FECHA_FUTURO DATE,
				@FECHA_FIN_INHABILITACION DATE,

				@Success BIT = 0,      
				@Severity INT = 0,      
				@Message VARCHAR(MAX) = '',      
				@MessageReal VARCHAR(MAX) = ''

		SET @FECHA_FUTURO = DATEADD(DAY,100,@FECHA_ACTUAL)
      
		BEGIN TRANSACTION;        
			        
			BEGIN TRY      
				/*LOG*/
				SELECT	@USUARIO = UPPER(c.value('@USUARIO', 'VARCHAR(20)')),
						@NOMBRE_USUARIO = UPPER(c.value('@NOMBRE_USUARIO', 'VARCHAR(50)')),
						@AMBITO = UPPER(c.value('@AMBITO', 'VARCHAR(100)')),
						@ROL = UPPER(c.value('@ROL', 'VARCHAR(100)'))
				FROM	@REQUEST_XML.nodes('/root/usuario/row') x(c);
  
				
				
				/*
				IF @ES_EXTRABAJADOR = 1
					BEGIN
						SELECT	@SITUACION_LABORAL = SITUACION_LABORAL
						FROM	transaccional.accion_por_servidor_publico_registro AS AR WITH (NOLOCK)
						WHERE	AR.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

						SET @Message = 'No se puede registrar la acciÃ³n, ya que la situaciÃ³n laboral actual del servidor es "' + @SITUACION_LABORAL + '"';
						RAISERROR(@Message,11,1)
					END
					*/
  
				IF OBJECT_ID('tempdb..#DATOS_SANCIONES_ADMINISTRATIVAS') IS NOT NULL       
					DROP TABLE #DATOS_SANCIONES_ADMINISTRATIVAS     
      
   
				CREATE TABLE #DATOS_SANCIONES_ADMINISTRATIVAS    
				(	CODIGO_ESTADO_REGISTRO INT,      
					DIAS_SANCION INT,      
					ID_SERVIDOR_PUBLICO INT,    
					FECHA_NOTIFICACION VARCHAR(50), 
					FECHA_INICIO VARCHAR(50),   
					FECHA_FIN VARCHAR(50), 
					FECHA_CESE VARCHAR(50), 
					--USUARIO_CREACION VARCHAR(12) ,  
					ID_TIPO_RESOLUCION INT,
					NUMERO_RESOLUCION VARCHAR(50),
					FECHA_RESOLUCION DATE,
					ID_TIPO_SANCION INT,
					ID_TIPO_RESULTADO INT,
					--ID_TIPO_MONEDA INT,
					--MONTO_MULTA DECIMAL,
					ID_REGIMEN INT,
					ID_SANCION_APERTURA INT,
					DESCRIPCION_SANCION_RELACIONADA VARCHAR(500),
					ENTIDAD_EMISORA_RESOLUCION VARCHAR(60),
					NOMBRE_DOCUMENTO VARCHAR(250),
					NOMBRE_ARCHIVO VARCHAR(250),
					FOLIOS_DOCUMENTO INT,
					OBSERVACION VARCHAR(255),
					CANTIDAD_ANIOS_INHABILITACION INT,
					FECHA_INICIO_INHABILITACION DATE,
					FECHA_FIN_INHABILITACION DATE
				)      

				INSERT INTO #DATOS_SANCIONES_ADMINISTRATIVAS      
				SELECT   c.value('@CODIGO_ESTADO_REGISTRO', 'INT')      
				, c.value('@DIAS_SANCION', 'INT')      
				, c.value('@ID_SERVIDOR_PUBLICO', 'INT')      
				, CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_NOTIFICACION', 'DATETIME')))   
				, CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_INICIO', 'DATETIME')))   
				, CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_FIN', 'DATETIME')))    
				, CONVERT(DATETIME,CONVERT(VARCHAR(12),c.value('@FECHA_CESE', 'DATETIME')))   
				--, NULLIF(c.value('@USUARIO_CREACION', 'VARCHAR(12)'),'')     
				, c.value('@ID_TIPO_RESOLUCION', 'INT')      
				, UPPER(NULLIF(c.value('@NUMERO_RESOLUCION', 'VARCHAR(50)'),''))
				, c.value('@FECHA_RESOLUCION', 'DATE')
				, c.value('@ID_TIPO_SANCION', 'INT')
				, c.value('@ID_TIPO_RESULTADO', 'INT')
				--, c.value('@ID_TIPO_MONEDA', 'INT')
				--, c.value('@MONTO_MULTA', 'DECIMAL')
				, c.value('@ID_REGIMEN', 'INT')
				, c.value('@ID_SANCION_APERTURA', 'INT')			
				, UPPER(NULLIF(c.value('@DESCRIPCION_SANCION_RELACIONADA', 'VARCHAR(500)'),''))
			
				, UPPER(NULLIF(c.value('@ENTIDAD_EMISORA_RESOLUCION', 'VARCHAR(60)'),''))
				, NULLIF(c.value('@NOMBRE_DOCUMENTO', 'VARCHAR(250)'),'')
				, NULLIF(c.value('@NOMBRE_ARCHIVO', 'VARCHAR(250)'),'')
				, c.value('@FOLIOS_DOCUMENTO', 'INT')
				, NULLIF(c.value('@OBSERVACION', 'VARCHAR(250)'),'')
				, c.value('@CANTIDAD_ANIOS_INHABILITACION', 'INT')
				, c.value('@FECHA_INICIO_INHABILITACION', 'DATE')
				, c.value('@FECHA_FIN_INHABILITACION', 'DATE')
				FROM @REQUEST_XML.nodes('/root/datos_sancion') x(c);
				--select  * from #DATOS_SANCIONES_ADMINISTRATIVAS    
				

				
    
				SELECT @ID_SERVIDOR_PUBLICO = ID_SERVIDOR_PUBLICO,      
				   --@USUARIO = USUARIO_CREACION,   
				   --@ID_SANCION_APERTURA = ID_SANCION_APERTURA,
				   @ID_TIPO_SANCION = ID_TIPO_SANCION,
				   --@ID_TIPO_MONEDA = ID_TIPO_MONEDA,
				   --@MONTO =MONTO_MULTA,
				   @FECHA_INICIO_SET = FECHA_INICIO,
				   @FECHA_FIN_SET = FECHA_FIN,
				   @FECHA_CESE_SET = FECHA_CESE,
				   @ID_TIPO_RESULTADO_SET = ID_TIPO_RESULTADO,
				   @DIAS_SANCION = DIAS_SANCION
				 , @ID_TIPO_RESOLUCION = ID_TIPO_RESOLUCION
				 , @NUMERO_RESOLUCION = NUMERO_RESOLUCION
				 , @FECHA_RESOLUCION = FECHA_RESOLUCION
				 , @FECHA_NOTIFICACION = FECHA_NOTIFICACION
			FROM #DATOS_SANCIONES_ADMINISTRATIVAS   

		IF @FECHA_RESOLUCION > @FECHA_HOY
			BEGIN
				SET @Message = 'La feha de la resoluciÃ³n no puede ser mayor a la fecha actual.';
				RAISERROR(@Message,11,1)
			END

			SELECT	@ID_CONDICION_LABORAL = ID_CONDICION_LABORAL,
						@ID_SITUACION_LABORAL_ACTUAL = ID_SITUACION_LABORAL
					FROM transaccional.accion_por_servidor_publico_registro 
					WHERE ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

				SELECT @ID_ESTADO_APROBADO = ID_ESTADO_REGISTRO      
				FROM sistema.estado_registro AS ER WITH (NOLOCK)      
				WHERE ER.CODIGO_ESTADO_REGISTRO = 5 --APROBADO      
      
				SELECT	@ES_EXTRABAJADOR = SP.ES_EXTRABAJADOR,
						@ID_REGIMEN_SERVIDOR = SP.ID_REGIMEN
				FROM	maestro.servidor_publico AS SP WITH (NOLOCK)
				WHERE	SP.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO


			/*BEGIN VALIDACION POR TIPO, NUMERO RESOLUCION Y AÃO DE RESOLUCION*/
			IF EXISTS(	SELECT	1
								FROM	transaccional.sancion_por_servidor_publico AS SSP WITH (NOLOCK)
										INNER JOIN sistema.estado_registro AS ER WITH (NOLOCK) ON SSP.ID_ESTADO_REGISTRO_SANCION = ER.ID_ESTADO_REGISTRO
								WHERE	
										SSP.ID_TIPO_RESOLUCION = @ID_TIPO_RESOLUCION
										AND SSP.NUMERO_RESOLUCION = @NUMERO_RESOLUCION
										AND YEAR(SSP.FECHA_RESOLUCION) = YEAR(@FECHA_RESOLUCION)
										AND ER.CODIGO_ESTADO_REGISTRO <> 6 --DIFERENTE DE ANULADO
										AND SSP.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO)
						BEGIN
							SET @Message = 'No se pudo realizar la acciÃ³n, debido a que ya existe un registro igual al ingresado.';
							RAISERROR(@Message,11,1)
						END
			/*END VALIDACION POR TIPO Y NUMERO RESOLUCION*/


			--IF @MONTO = 9999
			--BEGIN
			-- SET  @MONTO = NULL
			--END
		
			IF @ID_SANCION_APERTURA = 99
			BEGIN
			 SET  @ID_SANCION_APERTURA = NULL
			ENd

			IF YEAR(@FECHA_INICIO_SET) = 1900
					SET @FECHA_INICIO_SET = NULL
					
			IF YEAR(@FECHA_FIN_SET) = 1900
					SET @FECHA_FIN_SET = NULL

			IF YEAR(@FECHA_CESE_SET) = 1900
					SET @FECHA_CESE_SET = NULL

			IF YEAR(@FECHA_NOTIFICACION) = 1900
					SET @FECHA_NOTIFICACION = NULL

			IF( @ID_TIPO_SANCION = 7 ) --AMONESTACIÃN ESCRITA
			BEGIN
				SET @FECHA_INICIO_SET = NULL
				SET @FECHA_FIN_SET = NULL
				--SET @MONTO = NULL
				SET @DIAS_SANCION = NULL
				SET @FECHA_NOTIFICACION = NULL
			END	

			--MULTA 14
			--DESTITUCION 5
			--AMONESTACION 7

	   	      
			/*VALIDACION SI ES QUE LA DIFERENCIA DE AÃOS ES IGUAL A LA CANTIDAD DE DIAS*/
			
			IF(@ID_TIPO_SANCION NOT IN (5,7,14) AND @FECHA_INICIO_SET IS NOT NULL AND @FECHA_FIN_SET IS NOT NULL AND @DIAS_SANCION IS NOT NULL)
			BEGIN
				SET @DIF_DIAS = DATEDIFF(DAY,@FECHA_INICIO_SET,@FECHA_FIN_SET) + 1
				IF(@DIF_DIAS <> @DIAS_SANCION)
				BEGIN
						SET @Message = 'No se puede registrar la acciÃ³n, debido a que las fechas de inicio, fecha fin o cantidad de dÃ­as no son vÃ¡lidas.';
						RAISERROR(@Message,11,1)
				END
			END	

			SELECT	@ID_SITUACION_LABORAL = ID_SITUACION_LABORAL, 
					@SITUACION_LABORAL_CESE = DESCRIPCION_SITUACION_LABORAL 
			FROM	sistema.situacion_laboral AS SL WITH (NOLOCK)
			WHERE	ID_SITUACION_LABORAL IN (9,15,28) 
					AND ID_CONDICION_LABORAL = @ID_CONDICION_LABORAL

			SELECT	@CODIGO_TIPO_SANCION = CODIGO_TIPO_SANCION
			FROM	sistema.tipo_sancion AS TS WITH (NOLOCK)
			WHERE	TS.ID_TIPO_SANCION = @ID_TIPO_SANCION

			--CESE POR DESTITUCION
			IF @CODIGO_TIPO_SANCION = 5 --@ID_TIPO_SANCION IN (5,6,11,12)
				BEGIN
					SET @FECHA_CESE_SET = ISNULL(@FECHA_CESE_SET,@FECHA_HOY)
					IF @FECHA_CESE_SET > @FECHA_HOY --INICIO FUTURO
						SET @ES_VIGENTE = 0

					IF ISNULL(@FECHA_FIN_SET,@FECHA_HOY) < @FECHA_HOY --ACCION PASADA
						SET @ES_VIGENTE = 0

					IF @ES_VIGENTE = 1
						BEGIN --BUSCAR ACCION VIGENTE CON FECHA DE INICIO MAYOR Y QUE HAYA AFECTADO LA SITUACION LABORAL
							IF EXISTS(
										SELECT	ASP.ID_ACCION_POR_SERVIDOR_PUBLICO
										FROM	transaccional.accion_por_servidor_publico AS ASP WITH (NOLOCK)
												INNER JOIN sistema.estado_registro AS ER WITH (NOLOCK)
													ON ASP.ID_ESTADO_REGISTRO = ER.ID_ESTADO_REGISTRO
												INNER JOIN sistema.situacion_laboral_motivo_accion AS SLMA WITH (NOLOCK)
													ON ASP.ID_MOTIVO_ACCION = SLMA.ID_MOTIVO_ACCION
										WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
												AND SLMA.AFECTA_SITUACION_LABORAL = 1
												AND ER.CODIGO_ESTADO_REGISTRO IN (5,13,20,23) --APROBADO,EN TRASLADO,APROBADO CON SOLICITUD DE ANULACIÃN,LIMITADO
												AND CONVERT(DATETIME,CONVERT(VARCHAR(12),ASP.FECHA_INICIO_ACCION_POR_SERVIDOR_PUBLICO)) >= @FECHA_CESE_SET
												AND @FECHA_HOY BETWEEN 
													CONVERT(DATETIME,CONVERT(VARCHAR(12),ASP.FECHA_INICIO_ACCION_POR_SERVIDOR_PUBLICO)) AND 
													ISNULL(CONVERT(DATETIME,CONVERT(VARCHAR(12),ASP.FECHA_FIN_ACCION_POR_SERVIDOR_PUBLICO)), @FECHA_ACTUAL)
									)
								BEGIN
									SET @ES_VIGENTE = 0
								END
						END

					SET @ES_EXTRABAJADOR = 0

					IF(@ES_VIGENTE = 1)
					BEGIN
						IF	(
										
								(	
									--CESE DEFINITIVO,  CESE TEMPORAL E INHABILITACION
									@ID_TIPO_SANCION != 5 AND	(@FECHA_INICIO_SET IS NULL OR @FECHA_INICIO_SET <= @FECHA_ACTUAL) AND 
																(@FECHA_FIN_SET IS NULL OR @FECHA_FIN_SET >= @FECHA_ACTUAL)
								) OR 
								--DESTITUCION 
								( @ID_TIPO_SANCION = 5 AND (@FECHA_CESE_SET IS NULL OR @FECHA_CESE_SET  <= @FECHA_ACTUAL)
								)
							) AND @ID_SITUACION_LABORAL_ACTUAL NOT IN (9,28,34,35,36,37,38)
						BEGIN	
							UPDATE	maestro.servidor_publico
							SET		ES_EXTRABAJADOR = 1
							WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

							UPDATE	A
							SET		ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,	
									SITUACION_LABORAL = @SITUACION_LABORAL_CESE,						
									ES_EXTRABAJADOR = 1
							FROM	transaccional.accion_por_servidor_publico_registro AS A
							WHERE	A.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

						END
					END
					--ACTUALIZAR LA SITUACION LABORAL "A CESADO" PARA LA DESTITUCIÃN 
					SELECT @FECHA_FIN_INHABILITACION = FECHA_FIN_INHABILITACION FROM #DATOS_SANCIONES_ADMINISTRATIVAS
						IF (@FECHA_FIN_INHABILITACION >= GETDATE())				
						BEGIN
							SELECT	@ID_CONDICION_LABORAL = R.ID_CONDICION_LABORAL
							FROM	transaccional.accion_por_servidor_publico_registro AS R WITH (NOLOCK)
							WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

							SELECT	@ID_SITUACION_LABORAL = SL.ID_SITUACION_LABORAL,
									@SITUACION_LABORAL = SL.DESCRIPCION_SITUACION_LABORAL
						    FROM	sistema.situacion_laboral AS SL WITH (NOLOCK)
							WHERE	ID_CONDICION_LABORAL = @ID_CONDICION_LABORAL
									AND SL.DESCRIPCION_SITUACION_LABORAL LIKE '%CESADO%'
									AND SL.ES_VIGENTE = 1
							UPDATE	A
								SET		ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,	
										SITUACION_LABORAL = @SITUACION_LABORAL,						
										ES_EXTRABAJADOR = 0
								FROM	transaccional.accion_por_servidor_publico_registro AS A
								WHERE	A.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
						END
				END
			ELSE IF @CODIGO_TIPO_SANCION IN (4,6,11,12) --SANCION ADMINISTRATIVA, SITUACION LABORAL: CON SANCIÃN
				BEGIN
					SET @ES_VIGENTE = 1

					IF @FECHA_INICIO_SET > @FECHA_ACTUAL --FUTURO
						SET @ES_VIGENTE = 0

					IF ISNULL(@FECHA_FIN_SET, @FECHA_FUTURO) < @FECHA_ACTUAL --PASADO
						SET @ES_VIGENTE = 0

					IF @ES_VIGENTE = 1
						BEGIN --BUSCAR ACCION VIGENTE CON FECHA DE INICIO MAYOR Y QUE HAYA AFECTADO LA SITUACION LABORAL
							IF EXISTS(
										SELECT	ASP.ID_ACCION_POR_SERVIDOR_PUBLICO
										FROM	transaccional.accion_por_servidor_publico AS ASP WITH (NOLOCK)
												INNER JOIN sistema.estado_registro AS ER WITH (NOLOCK)
													ON ASP.ID_ESTADO_REGISTRO = ER.ID_ESTADO_REGISTRO
												INNER JOIN sistema.situacion_laboral_motivo_accion AS SLMA WITH (NOLOCK)
													ON ASP.ID_MOTIVO_ACCION = SLMA.ID_MOTIVO_ACCION
										WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
												AND SLMA.AFECTA_SITUACION_LABORAL = 1
												AND ER.CODIGO_ESTADO_REGISTRO IN (5,13,20,23) --APROBADO,EN TRASLADO,APROBADO CON SOLICITUD DE ANULACIÃN,LIMITADO
												AND CONVERT(DATETIME,CONVERT(VARCHAR(12),ASP.FECHA_INICIO_ACCION_POR_SERVIDOR_PUBLICO)) >= @FECHA_INICIO_SET
												AND @FECHA_HOY BETWEEN 
													CONVERT(DATETIME,CONVERT(VARCHAR(12),ASP.FECHA_INICIO_ACCION_POR_SERVIDOR_PUBLICO)) AND 
													ISNULL(CONVERT(DATETIME,CONVERT(VARCHAR(12),ASP.FECHA_FIN_ACCION_POR_SERVIDOR_PUBLICO)), @FECHA_FUTURO)
									)
								BEGIN
									SET @ES_VIGENTE = 0
								END
						END

					IF @ES_VIGENTE = 1
						BEGIN
							SELECT	@ID_CONDICION_LABORAL = R.ID_CONDICION_LABORAL
							FROM	transaccional.accion_por_servidor_publico_registro AS R WITH (NOLOCK)
							WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

							SELECT	@ID_SITUACION_LABORAL = SL.ID_SITUACION_LABORAL,
									@SITUACION_LABORAL = SL.DESCRIPCION_SITUACION_LABORAL
							FROM	sistema.situacion_laboral AS SL WITH (NOLOCK)
							WHERE	ID_CONDICION_LABORAL = @ID_CONDICION_LABORAL
									AND SL.CODIGO_SITUACION_LABORAL = 8 --CON SANCION
									AND SL.ES_VIGENTE = 1

							UPDATE	maestro.servidor_publico
							SET		ES_EXTRABAJADOR = 0
							WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

							UPDATE	A
							SET		ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,	
									SITUACION_LABORAL = @SITUACION_LABORAL,						
									ES_EXTRABAJADOR = 0
							FROM	transaccional.accion_por_servidor_publico_registro AS A
							WHERE	A.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
						END

					--ACTUALIZAR LA SITUACION LABORAL "A CON SANCIÃN" PARA LA SUSPENSIÃN TEMPORAL Y DE CESE TEMPORAL 
					PRINT (CONVERT(varchar,@FECHA_FIN_SET,101) + ' FECHA_FIN_SET')
															
						IF (@FECHA_FIN_SET >= GETDATE())				
						BEGIN							
							SELECT	@ID_CONDICION_LABORAL = R.ID_CONDICION_LABORAL
							FROM	transaccional.accion_por_servidor_publico_registro AS R WITH (NOLOCK)
							WHERE	ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO

							SELECT	@ID_SITUACION_LABORAL = SL.ID_SITUACION_LABORAL,
									@SITUACION_LABORAL = SL.DESCRIPCION_SITUACION_LABORAL
							FROM	sistema.situacion_laboral AS SL WITH (NOLOCK)
							WHERE	ID_CONDICION_LABORAL = @ID_CONDICION_LABORAL
									AND SL.DESCRIPCION_SITUACION_LABORAL LIKE '%CON SANCIÃN%' --CON SANCION
									AND SL.ES_VIGENTE = 1
							
							UPDATE	A
								SET		ID_SITUACION_LABORAL = @ID_SITUACION_LABORAL,	
										SITUACION_LABORAL = @SITUACION_LABORAL,						
										ES_EXTRABAJADOR = 0
								FROM	transaccional.accion_por_servidor_publico_registro AS A
								WHERE	A.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO
						END
				END
			

			SELECT	@ID_PERSONA = ID_PERSONA      
			FROM	maestro.servidor_publico AS SP WITH (NOLOCK)      
			WHERE	SP.ID_SERVIDOR_PUBLICO = @ID_SERVIDOR_PUBLICO      
    
 
			  INSERT INTO transaccional.sancion_por_servidor_publico   
			  (  
				  [ID_SERVIDOR_PUBLICO]  
				  ,ID_TIPO_SANCION
				  ,ID_ESTADO_REGISTRO_SANCION 
				  ,CAUSA_SANCION_POR_SERVIDOR_PUBLICO
				  ,FECHA_NOTIFICA_SANCION_SANCION_POR_SERVIDOR_PUBLICO
				  ,FECHA_INICIO_VIGENCIA
				  ,FECHA_INI_SANCION_SANCION_POR_SERVIDOR_PUBLICO  
				  ,FECHA_FIN_SANCION_SANCION_POR_SERVIDOR_PUBLICO  
				  ,FECHA_CESE_SANCION_POR_SERVIDOR_PUBLICO
				  , DIAS_SANCION_SANCION_POR_SERVIDOR_PUBLICO
				  ,[ES_VIGENTE]  
				  ,[FECHA_CREACION]  
				  --,[USUARIO_CREACION]  
				  , USUARIO_CREACION
				  , NOMBRE_USUARIO_CREA
				  , AMBITO_USUARIO_CREA
				  , ROL_USUARIO_CREA
				  ,[ES_BORRADO]  
				  ,ID_TIPO_RESOLUCION
				  ,NUMERO_RESOLUCION
				  ,FECHA_RESOLUCION
				  --,ID_TIPO_MONEDA
				  --,MONTO_MULTA_SANCION_SANCION_POR_SERVIDOR_PUBLICO
				  ,ID_REGIMEN
				  ,ID_SANCION_RELACIONADA
				  ,DESCRIPCION_SANCION_RELACIONADA
					,ENTIDAD_EMISORA_RESOLUCION
					,NOMBRE_DOCUMENTO
					,NOMBRE_ARCHIVO
					,FOLIOS_DOCUMENTO
					,OBSERVACION_SANCION_POR_SERVIDOR_PUBLICO
					,CANTIDAD_ANIOS_INHABILITACION
					,FECHA_INICIO_INHABILITACION
					,FECHA_FIN_INHABILITACION
			  )
			  SELECT     
			  @ID_SERVIDOR_PUBLICO ,   @ID_TIPO_SANCION,
			  @ID_ESTADO_APROBADO,   'sancion administrativa', 
			  @FECHA_NOTIFICACION,   @FECHA_ACTUAL,  
			  @FECHA_INICIO_SET,    @FECHA_FIN_SET,  @FECHA_CESE_SET,
			  @DIAS_SANCION,
			  1, @FECHA_ACTUAL,   
			  --USUARIO_CREACION,  
			  @USUARIO, 
			  @NOMBRE_USUARIO, 
			  @AMBITO,
			  @ROL,
			  0 ,  ID_TIPO_RESOLUCION,
			  NUMERO_RESOLUCION,  FECHA_RESOLUCION,
			  --@ID_TIPO_MONEDA,
			  --@MONTO ,
			   ID_REGIMEN ,
			   --@ID_SANCION_APERTURA ,  
			   ID_SANCION_APERTURA,
			   DESCRIPCION_SANCION_RELACIONADA
			   ,ENTIDAD_EMISORA_RESOLUCION
			   ,NOMBRE_DOCUMENTO
			   ,NOMBRE_ARCHIVO
			  ,FOLIOS_DOCUMENTO
			  ,OBSERVACION
			  ,CANTIDAD_ANIOS_INHABILITACION
			  ,FECHA_INICIO_INHABILITACION
			  ,FECHA_FIN_INHABILITACION
			  FROM #DATOS_SANCIONES_ADMINISTRATIVAS
			  SET @ID_SANCION_POR_SERVIDOR_PUBLICO = SCOPE_IDENTITY();      
		

		
		--ACTUALIZACION DEL FLAG = 0 PARA SER TOMADO POR EL JOB DIARIO DE CALCULO DE ATS 25 Y 30 18-01-2021
		UPDATE maestro.servidor_publico SET ACTUALIZADO_ATS = 0 WHERE ID_SERVIDOR_PUBLICO =  @ID_SERVIDOR_PUBLICO 
		
		SET @Success = 1      
		SET @Message = 'El registro se guardÃ³ satisfactoriamente.'
      
 END TRY        
 BEGIN CATCH        
      
  SET @MessageReal = ERROR_MESSAGE()      
  SET @Message = @MessageReal      
  SET @Severity = ERROR_SEVERITY()      
      
  IF @Severity = 16      
   SET @Message = 'Ha ocurrido un error. Contacte con el administrador del sistema.'      
        
  IF @@TRANCOUNT > 0        
   ROLLBACK TRANSACTION;        
 END CATCH;        
        
 IF @@TRANCOUNT > 0        
  COMMIT TRANSACTION;      
      
 IF @Severity = 16 AND @Success = 0      
  BEGIN      
   INSERT INTO [auditoria].[log_error]      
   ([NOMBRE_SP], [INPUT_PARAMS_XML], [MENSAJE_BD], [MENSAJE_USUARIO], [FECHA_CREACION], [USUARIO_CREACION])      
   VALUES      
   ('USP_ESCALAFON_INS_DATOS_SANCION_ADMINISTRATIVA', @REQUEST_XML, @MessageReal, @Message, @FECHA_ACTUAL, @USUARIO)      
  END      
      
 SELECT @Success AS Success,      
   @Message AS [Message],      
   @ID_SANCION_POR_SERVIDOR_PUBLICO AS [Value]      
      
END
GO


